<?php
/**
 * Created on Jan 8, 2008, 7:09:44 PM
 *
 * abhilash
 */

///////////////////////////////////////////////////////////////////////////////
///                                                                         ///
/// General functions for editing a question                                ///
/// 	These functions will call quiz-type specific functions                ///
/// 	to achieve what's necessary                                           ///
///                                                                         ///
///////////////////////////////////////////////////////////////////////////////

/**
 * Determines the type of a given question in a given quiz
 * @param $moduleComponentId Id of the quiz
 * @param $questionId Id of the question
 * @return String containing the question type of the given question, an empty string indicating failure
 */
function getQuestionType($moduleComponentId, $questionId) {
	$questionQuery = 'SELECT `quiz_questiontype` FROM `quiz_questions` WHERE `page_modulecomponentid` = ' . $moduleComponentId . ' AND `quiz_questionid` = ' . $questionId;
	$questionResult = mysql_query($questionQuery);
	$questionRow = mysql_fetch_row($questionResult);

	return $questionRow[0];
}

/**
 * Generates a form to edit a question
 * @param $moduleComponentId Id of the quiz
 * @param $questionId Id of the question belonging to the quiz
 * @param $quizQuestionTypes Array containing the different question types available
 * @return String containing HTML for the form generated
 */
function getQuestionEditForm($moduleComponentId, $questionId, &$quizQuestionTypes) {
	require_once('quiz_edit.php');
	$quizType = getQuizType($moduleComponentId);

	$quizSpecificFunction = 'get' . $quizType . 'QuizQuestionEditForm';
	if(function_exists($quizSpecificFunction)) {
		return $quizSpecificFunction($moduleComponentId, $questionId, $quizQuestionTypes);
	}

	displayerror('The given quiz type has not been completely implemented yet.');
	return '';
}

/**
 * Saves changes made through a form returned by getQuestionEditForm
 * @param $moduleComponentId Id of the quiz
 * @param $questionId Id of the question belonging to the quiz
 * @param $quizQuestionTypes Array containing the different question types available
 * @return Boolean, true indicating success, and false failure
 */
function submitQuestionEditForm($moduleComponentId, $questionId, &$quizQuestionTypes) {
	require_once('quiz_edit.php');
	$quizType = getQuizType($moduleComponentId);

	$quizSpecificFunction = 'submit' . $quizType . 'QuizQuestionEditForm';
	if(function_exists($quizSpecificFunction)) {
		return $quizSpecificFunction($moduleComponentId, $questionId, $quizQuestionTypes);
	}

	displayerror('The given quiz type has not been completely implemented yet.');
	return false;
}

/**
 * Generates HTML for a form to help add questions to a given quiz
 * @param $moduleComponentId Id of the quiz
 * @param $quizQuestionTypes The different allowable types of questions for the quiz
 * @return String containing HTML for the generated form
 */
function getQuestionAddForm($moduleComponentId, $quizQuestionTypes) {
	require_once('quiz_edit.php');
	$quizType = getQuizType($moduleComponentId);
	if($quizType == '') {
		displayerror('Invalid quiz type');
		return '';
	}

	$typeSpecificFunction = 'get' . ucfirst($quizType) . 'QuizQuestionAddForm';
	if(function_exists($typeSpecificFunction)) {
		return $typeSpecificFunction($moduleComponentId, 5, $quizQuestionTypes);
	}

	displayerror('The given quiz type has not been completely implemented yet.');
	return '';
}

/**
 * Submits a form generated by getQuestionAddForm
 * @param $moduleComponentId Id of the quiz
 * @return Boolean, true indicating success, false indicating failure
 */
function submitQuestionAddForm($moduleComponentId) {
	require_once('quiz_edit.php');
	$quizType = getQuizType($moduleComponentId);

	if($quizType == '') {
		displayerror('Invalid quiz type');
		return '';
	}

	$typeSpecificFunction = 'submit' . ucfirst($quizType) . 'QuizQuestionAddForm';
	if(function_exists($typeSpecificFunction)) {
		return $typeSpecificFunction($moduleComponentId);
	}

	displayerror('The given quiz type has not been completely implemented yet.');
	return '';
}

/**
 * Generate HTML for a form to help edit a single question
 * @param $index Index of the question edit form
 * @param $questionTypesBox The select box where the user can choose question types
 * @param $moduleComponentId Id of the quiz
 * @return String containing HTML for the edit form
 */
function getQuestionEditFormHtml($index, $questionTypesBox, $moduleComponentId = 0, $questionId = 0) {
	$questionTitle = $questionText = '';

	if($moduleComponentId != 0) {
		$questionDescQuery = 'SELECT `quiz_questiontitle`, `quiz_question` FROM `quiz_questions` WHERE `page_modulecomponentid` = ' . $moduleComponentId . ' AND `quiz_questionid` = ' . $questionId;
		$questionDescResult = mysql_query($questionDescQuery);
		if($questionDescResult) {
			if($questionDescRow = mysql_fetch_assoc($questionDescResult)) {
				$questionTitle = $questionDescRow['quiz_questiontitle'];
				$questionText = $questionDescRow['quiz_question'];
			}
			else {
				return '';
			}
		}
	}

	$questionEditForm = <<<QUESTIONEDITFORM
				<tr><td nowrap="nowrap"><label for="txtQuestionTitle$index">Question Title:</label></td><td><input type="text" name="txtQuestionTitle[]" id="txtQuestionTitle$index" value="{$questionTitle}"/></td></tr>
				<tr><td nowrap="nowrap"><label for="txtQuestion$index">Question:</label></td><td><textarea id="txtQuestion$index" name="txtQuestion[]" rows="3" cols="64">$questionText</textarea></td></tr>
				<tr>
					<td nowrap="nowrap"><label for="selQuestionType$index">Question Type:</label></td>
					<td>
						<select name="selQuestionType[]" id="selQuestionType$index" onchange="QuestionTypeChanged(this.value, document.getElementById('questionSpecOpts$index'), $index);">
							$questionTypesBox
						</select>
					</td>
				<tr>
					<td colspan="2">
						<table id="questionSpecOpts$index">
						</table>
					</td>
				</tr>
				</tr>
QUESTIONEDITFORM;
	return $questionEditForm;
}



///////////////////////////////////////////////////////////////////////////////
///                                                                         ///
/// Simple Quiz Specific Functions                                          ///
///                                                                         ///
///////////////////////////////////////////////////////////////////////////////

/**
 * Generates HTML for a form to help add questions to a Simple Quiz
 * @param $moduleComponentId Id of the quiz
 * @param $questionCount Number of question edit field sets to show
 * @param $quizQuestionTypes Different question types available
 * @return String containing HTML for the form, an empty string in case of errors
 */
function getSimpleQuizQuestionAddForm($moduleComponentId, $questionCount, $quizQuestionTypes) {
	$questionTypesBox = '';
	foreach($quizQuestionTypes as $typeName => $typeDesc) {
		$questionTypesBox .= "<option value=\"$typeName\">$typeDesc</option>\n";
	}

	global $urlRequestRoot, $sourceFolder, $moduleFolder;
	$quizFolderUrl = "$urlRequestRoot/$sourceFolder/$moduleFolder/quiz";

	$questionAddForm = <<<QUESTIONADDFORM
		<script language="javascript" type="text/javascript" src="$quizFolderUrl/quizeditform.js"></script>
		<form name="questionaddform" action="./+edit&subaction=addquestions" method="POST">
		<table>
QUESTIONADDFORM;

	for($i = 0; $i < $questionCount; $i++) {
		$questionAddForm .= getQuestionEditFormHtml($i, $questionTypesBox, 0) . '<tr><td>&nbsp;</td><td>&nbsp;</td></tr><tr><td colspan="2">&nbsp;</td></tr>';
	}

	$questionAddForm .= <<<QUESTIONADDFORM
			</table>
			<input type="submit" name="btnAddQuestions" value="Add Questions" />
			<script language="javascript" type="text/javascript">
				for(i = 0; i < $questionCount; i++)
					QuestionTypeChanged(document.getElementById('selQuestionType' + i).value, document.getElementById('questionSpecOpts' + i), i);
			</script>
		</form>
		<br /><br />
QUESTIONADDFORM;

	require_once("$sourceFolder/$moduleFolder/quiz/quiz_edit.php");
//	$questionAddForm .= getQuizFileUploadForm($moduleComponentId, 5);
	return $questionAddForm;
}


/**
 * Submits new questions to be added to a given Simple Quiz
 * @param $moduleComponentId Id of the quiz
 * @return Boolean, true indicating success, and false, failure
 */
function submitSimpleQuizQuestionAddForm($moduleComponentId) {
	if(!is_array($_POST['txtQuestion'])) {
		displayerror('Invalid submit data');
		return false;
	}

	$questionInsertData = array();
	$objectiveInsertData = array();
	$objectiveDeleteData = array();
	$insertIdStart = 1;
	$insertIdQuery = 'SELECT MAX(`quiz_questionid`) FROM `quiz_questions` WHERE `page_modulecomponentid` = ' . $moduleComponentId;
	$insertIdResult = mysql_query($insertIdQuery);
	$insertIdRow = mysql_fetch_row($insertIdResult);
	if(!is_null($insertIdRow[0])) {
		$insertIdStart = $insertIdRow[0] + 1;
	}

	$questionCount = count($_POST['txtQuestion']);

	for($i = 0; $i < $questionCount && $_POST['txtQuestion'][$i] != ''; $i++) {
		if (isset($_POST['selQuestionType'][$i]) && isset($_POST['txtQuestionTitle'][$i])) {
			$questionType = $_POST['selQuestionType'][$i];

			if ($questionType == 'subjective') {
				$rightAnswer = $_POST['txtRightAnswer' . $i];
			}
			else {
				$rightAnswer = array();

				if(!isset($_POST['txtQuestionOption' . $i]) || !is_array($_POST['txtQuestionOption' . $i]))
					continue;

				for($j = 0; $j < count($_POST['txtQuestionOption' . $i]) && $_POST['txtQuestionOption' . $i][$j] != ''; $j++) {
					$objectiveInsertData[] = "($moduleComponentId, " . ($insertIdStart + $i) . ", $j, '" . $_POST['txtQuestionOption' . $i][$j] . "', $j)";
				}

				if($questionType == 'multiselectobjective')
					$rightAnswer = join($_POST['optCorrectAnswer' . $i], '|');
				else
					$rightAnswer = isset($_POST['optCorrectAnswer' . $i]) ? $_POST['optCorrectAnswer' . $i] : '';
				$objectiveDeleteData[] = $insertIdStart + $i;
			}

			$questionInsertData[] = "($moduleComponentId, " . ($insertIdStart + $i) . ", '{$_POST['txtQuestionTitle'][$i]}', '{$_POST['txtQuestion'][$i]}', " .
					"'{$_POST['selQuestionType'][$i]}', '$rightAnswer')";
		}
	}

	$questionInsertQuery = 'INSERT INTO `quiz_questions` (`page_modulecomponentid`, `quiz_questionid`, `quiz_questiontitle`, `quiz_question`, `quiz_questiontype`, `quiz_rightanswer`) VALUES ' .
				join($questionInsertData, ', ');
	$objectiveDeleteQuery = 'DELETE FROM `quiz_objectiveoptions` WHERE `page_modulecomponentid` = ' . $moduleComponentId . ' AND `quiz_questionid` IN (' .
				join($objectiveDeleteData, ', ') . ')';
	$objectiveInsertQuery = 'INSERT INTO `quiz_objectiveoptions`(`page_modulecomponentid`, `quiz_questionid`, `quiz_questionoptionid`, `quiz_questionoption`, `quiz_questionoptionrank`) VALUES ' .
				join($objectiveInsertData, ', ');

	if(count($questionInsertData) > 0 && !mysql_query($questionInsertQuery)) {
		displayerror('Error inserting questions into the database:<br />' . $questionInsertQuery . '<br />' . mysql_error() );
		return false;
	}
	if(count($objectiveDeleteData) > 0 && !mysql_query($objectiveDeleteQuery)) {
		displayerror('Error deleting existing objective options.');
		return false;
	}
	if(count($objectiveInsertData) > 0 && !mysql_query($objectiveInsertQuery)) {
		displayerror('Error inserting objective question options.');
		return false;
	}

	displayinfo('All questions successfully saved.');
	return true;
}

/**
 * Generates HTML for a form to help edit a question in a simple quiz
 * @param $moduleComponentId Id of the quiz
 * @param $questionId Id of the question belonging to the quiz
 * @param $quizQuestionTypes Array containing the different question types available
 * @return String containing HTML for the form generated
 */

function getSimpleQuizQuestionEditForm($moduleComponentId, $questionId, &$quizQuestionTypes) {
	require_once('quiz_edit.php');
	$questionType = getQuestionType($moduleComponentId, $questionId);
	if($questionType == '') {
		displayerror('Could not load information for the question.');
		return '';
	}
	$questionTypesBox = '';
	foreach($quizQuestionTypes as $questionTypeName => $questionTypeTitle) {
		$questionTypesBox .= '<option value="'.$questionTypeName.'"';
		if($questionTypeName == $questionType) {
			$questionTypesBox .= ' selected="selected"';
		}
		$questionTypesBox .= ">$questionTypeName</option>\n";
	}
	$questionEditForm = getQuestionEditFormHtml(0, $questionTypesBox, $moduleComponentId, $questionId);

	global $urlRequestRoot, $sourceFolder, $moduleFolder;
	$quizFolderUrl = "$urlRequestRoot/$sourceFolder/$moduleFolder/quiz";

	$jsDefinitions = getSimpleQuizQuestionJSDefinitions($moduleComponentId, $questionId);

	$questionEditForm = <<<QUESTIONEDITFORM
		<script language="javascript" type="text/javascript">
			objChoices = new Array();
			objRightAnswers = new Array();
			subjRightAnswers = new Array();
			$jsDefinitions
		</script>
		<script language="javascript" type="text/javascript" src="$quizFolderUrl/quizeditform.js"></script>

		<form name="questionEditForm" method="POST" action="./+edit&subaction=editquestion&questionid=$questionId">
			<table>
				$questionEditForm
				<tr>
					<td colspan="2">
						<table id="questionSpecOpts"></table>
					</td>
				</tr>
			</table>

			<br />
			<input type="submit" name="btnSubmitQuestionEditForm" value="Save Question" />
		</form>

		<script language="javascript" type="text/javascript">
			QuestionTypeChanged(document.getElementById('selQuestionType0').value, document.getElementById('questionSpecOpts0'), 0);
		</script>
QUESTIONEDITFORM;

	return $questionEditForm;
}

/**
 * Submits a form generated by getSimpleQuizQuestionEditForm
 * @param $moduleComponentId Id of the quiz
 * @param $questionId Id of the question belonging to the quiz
 * @param $quizQuestionTypes Array containing the different question types available
 * @return String containing HTML for the form generated
 */
function submitSimpleQuizQuestionEditForm($moduleComponentId, $questionId, &$quizQuestionTypes) {
	if(!isset($_POST['txtQuestionTitle'][0]) || !isset($_POST['txtQuestion'][0]) || !isset($_POST['selQuestionType'][0])) {
		displayerror('Error! The form you submitted appears to be incomplete.');
		return false;
	}

	include_once('quiz_edit.php');

	$questionType = $_POST['selQuestionType'][0];
	if(!in_array($questionType, array_keys($quizQuestionTypes))) {
		displayerror('Error: Unknown question type.');
		return false;
	}

	$questionTitle = $_POST['txtQuestionTitle'][0];
	$questionText = $_POST['txtQuestion'][0];
	$rightAnswer = '';
	switch($questionType) {
		case 'subjective':
			$rightAnswer = $_POST['txtRightAnswer'][0];
		break;
		case 'singleselectobjective':
			$rightAnswer = $_POST['optCorrectAnswer0'];
		break;
		case 'multiselectobjective':
			$rightAnswer = join($_POST['optCorrectAnswer0'], '|');
		break;
	}

	$updateQuery = "UPDATE `quiz_questions` SET `quiz_questiontitle` = '$questionTitle', " .
				"`quiz_question` = '$questionText', `quiz_questiontype` = '$questionType', " .
				"`quiz_rightanswer` = '$rightAnswer' WHERE " .
				"`page_modulecomponentid` = $moduleComponentId AND `quiz_questionid` = $questionId";
	if(!mysql_query($updateQuery)) {
		displayerror('Error updating the properties of the quiz.');
		return false;
	}

	$deleteQuery = "DELETE FROM `quiz_objectiveoptions` WHERE `page_modulecomponentid` = $moduleComponentId AND `quiz_questionid` = $questionId";
	$deleteResult = mysql_query($deleteQuery);

	if (
				($questionType == 'singleselectobjective' || $questionType == 'multiselectobjective') &&
				is_array($_POST['txtQuestionOption0']) && count($_POST['txtQuestionOption0']) > 0
		 ) {
		$insertQuery = 'INSERT INTO `quiz_objectiveoptions` ' .
				'(`page_modulecomponentid`, `quiz_questionid`, `quiz_questionoptionid`, `quiz_questionoption`, `quiz_questionoptionrank`) ';
		$insertData = array();
		$optionCount = count($_POST['txtQuestionOption0']);
		for($i = 0; $i < $optionCount; $i++) {
			if($_POST['txtQuestionOption0'][$i] != '')
				$insertData[] = "($moduleComponentId, $questionId, $i, '{$_POST['txtQuestionOption0'][$i]}', $i)";
		}

		if(count($insertData) > 0) {
			$insertQuery .= 'VALUES ' . join($insertData, ', ');
			if(!mysql_query($insertQuery)) {
				displayerror('Error! The options could not be inserted. ' . mysql_error() . '<br />' . $insertQuery);
				return false;
			}
		}
		else {
			print_r($_POST);
		}
	}

	return true;
}

/**
 * Returns Javascript definitions for a given question in a given Simple Quiz
 * @param $moduleComponentId Id of the quiz
 * @param $questionId Id of the question belonging to the quiz
 * @param $index In case the question edit must be a part of a list, the index of the given question in that list
 * @return String containing Javascript definitions for the question
 */
function getSimpleQuizQuestionJSDefinitions($moduleComponentId, $questionId, $index = 0) {
	$questionQuery = 'SELECT `quiz_questiontype`, `quiz_rightanswer` FROM `quiz_questions` WHERE ' .
			"`page_modulecomponentid` = $moduleComponentId AND `quiz_questionid` = $questionId";
	$questionResult = mysql_query($questionQuery);
	$questionRow = mysql_fetch_assoc($questionResult);
	if(!$questionRow) {
		displayerror('Error fetching information about question.');
		return '';
	}

	$questionType = $questionRow['quiz_questiontype'];
	if($questionType == 'subjective') {
		return "answerMaxLength[$index] = {$questionRow['quiz_answermaxlength']}";
	}
	else {
		$optionsQuery = 'SELECT `quiz_questionoptionid`, `quiz_questionoption`, `quiz_questionoptionrank` FROM `quiz_objectiveoptions` WHERE ' .
				"`page_modulecomponentid` = $moduleComponentId AND `quiz_questionid` = $questionId ORDER BY `quiz_questionoptionrank`";
		$optionsResult = mysql_query($optionsQuery);
		$jsDefinitions = 'objChoices[' . $index . '] = Array(';
		$objChoices = array();
		while($optionsRow = mysql_fetch_assoc($optionsResult)) {
			$objChoices[] = "'{$optionsRow['quiz_questionoption']}'";
		}

		if(count($objChoices) > 0)	$objRightAnswers = array_fill(0, count($objChoices), 'false');
		else $objRightAnswers = array();

		$rightAnswers = explode('|', $questionRow['quiz_rightanswer']);
		for($i = 0; $i < count($rightAnswers); $i++) {
			$objRightAnswers[$rightAnswers[$i]] = 'true';
		}

		if(count($objChoices) > 0) {
			$jsDefinitions = 'objChoices[' . $index . '] = Array('. join($objChoices, ', ') . ");\n" .
					'objRightAnswers[' . $index . '] = Array('. join($objRightAnswers, ', ') . ');';
		}
		else {
			$jsDefinitions = '';
		}
		return $jsDefinitions;
	}
}



///////////////////////////////////////////////////////////////////////////////
///                                                                         ///
/// GRE Quiz Specific Functions                                             ///
///                                                                         ///
///////////////////////////////////////////////////////////////////////////////

?>
