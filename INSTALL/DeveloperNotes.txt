  * CMS Working Overview
  * Pretty URLs
  * Authentication
  * Modules
  * Groups
  * Permissions
  * Page Settings
  * Individual Module Documentation
    * Article
    * Form
    * Forum
    * Gallery
    * News
    * Newsletter
    * Poll
    * PR
    * Quiz


**************************************************************************
CMS Working Overview
**************************************************************************

	Pages:
	******
	The Pragyan CMS works with the concept of pages. Each page on the CMS, is
	called a page (!).
	All pages have the following properties : 
		page id, parent page id, page name, module name, module component id.
	
	Page path:
	**********
	If pages are arranged in the form of a tree, with each page's parent node 
	being the page having page id same as that page's parent page id, we get
	the complete website tree. 
	
	Using this website tree the page paths are formed. To find the page of a
	particular page, keep going up until the root page is encountered. 
	
	The root page is the page with both page id and the parent page id equal
	to 0.
	
	For example, in the website tree:

		root
		+---classes
		|	+---fir
		|	|	+---a
		|	|	+---b
		|	|	+---c
		|	+---sec
		|	|	+---d
		|	|	+---e
		|	|	+---f
		|	+---thi
		|		+---g
		|		+---h
		|		+---i
		+---rules
		|	+---gen
		|	+---spe
		+---tests
		|	+---fir
		|	+---sec
		|	+---forum
		+---departments
			+---comsc
			+---ece
			+---civil

	The page path of the page named a will be: /classes/fir/a
	The page path of the second page named b will be: /classes/thi/b
	
	Module:
	*******
	All pages have a property called module name. This module name specifies
	the type of the page. Each module must come complete with its own set of
	actions that provide an interface for the user to interact with the
	module. Each action may use several subactions privately to work
	effectively.

	For example, Article is a module that supports viewing (action "View")
	and editing (action "Edit"); and Form is a module that supports viewing
	(to register), editing, and viewing and editing of registrants.

	Users or groups can be granted permissions for each action (but not
	each subaction) separately, this implies that a module must divide
	the different tasks that can be performed on it in such a way that 
	tasks that might require different levels of authorization are
	implemented as different actions. For example, an article must
	be viewable by mostly all visitors to a web site, but it must be
	editable only by a select few. Hence, View and Edit are different
	actions.

	Modules may be plugged into and out of the Pragyan CMS as required.

	Page Id:
	********
	All pages have a unique page id. 
	The root of Pragyan CMS starts from a /home directory. This can however be
	changed through the .htaccess file.
	
	The part of the path specified after /home is called the page path.
	
	For example, in http://pragyan.org/myinstallfolder/home/events/forum, 
	the page path is /events/forum
	
	Using the page path, the page id is computed.

**************************************************************************
Pretty URLs
**************************************************************************
	Everything after /home in the $_SERVER['REQUEST_URI'] variable is called
	the page path. This page is found using this page path.
	
	Example : 
	In the request http://pragyan.org/myinstallfolder/home/events/forum,
		the CMS install folder is : myinstallfolder
		the CMS root is : home
		the page path is : /events/forum
		
	In case any action is passed to the page, it is passed by appending
	a + symbol followed by the action. 
	
	Example :
	To perform the action edit on a page /events, the REQUEST_URI would be : 
	http://pragyan.org/myinstallfolder/home/events+edit
	
	For passing any GET variables, the format is the same as normal PHP file, 
	except that instead of the first ? symbol, an & symbol is to be used. 
	
	Example :
	To pass the get variable id with value 2, the REQUEST_URI would be :
	http://pragyan.org/myinstallfolder/home/events&id=2
	
	An example with multiple GET variables and an action :
	http://pragyan.org/myinstallfolder/home/events/forum+edit&forumname=myforum&threadid=56
	Here,
		page path is : /events/forum
		action is : edit
		get variables are : forumname = "myforum" and threadid = 56

**************************************************************************
Permissions
**************************************************************************
  Overview:
  *********
    The permissions module handles the responsibility of resolving the actions
    that any given user can perform on any given page. The module is used
    during every page access to determine if the user has the rights to 
    perform the requested operation on that page.

    A permission may be a page-level permission, or a module-level permission.
    A page-level permission is one that does not depend on the module of the
    given page, that is, the permission is available regardless of the page
    module. A module-level permission is specific to a module. Different
    modules may have their own set of permissions defined. For example, grant
    and settings are page-level permissions, while view is necessarily a
    module-level permission, and there may even be modules that do not support
    viewing at all. 

    All the functions required to calculate, and manipulate permissions are
    packaged inside permission.lib.php

  Storing Permissions:
  ********************
    The permissionlist Table:
      The permissionlist table maps the actions available for each module 
      to a permission id (perm_id).
      The actions are displayed in the action bar on each page in an order
      determined by the permission rank (perm_rank).
    The userpageperm Table:
      The userpageperm table stores all the set permissions, for each user
      on each page. The permission may be yes (Y) or no (N).

      Only the permissions that have been set explicitly are
      stored. Effective permissions are calculated based on rules described in
      the next section.

  Calculating Permissions:
  ************************
    To determine whether a given group has permissions to perform a certain
    operation on a given page, the following procedure is used:
    + Move up the page path, one level at a time, and check for any set
      permissions for the group for the correct module and action.
    + On encountering a no, the result is no. Quit the procedure.
    + If the root is reached without encountering any set permissions, the
      result is again no.
    + If the root was reached after encountering at least one yes, the result
      is yes.

    To determine whether a given user can perform a given operation on a given
    page, the following algorithm is used:
    + Find all the groups the user belongs to.
    + Calculate the permissions of each of the groups, in increasing order of
      priority. If any group has an effective permission of Y, the user is also
      given the permission.
    + If all groups have permission unset or N, calculate the permission for
      the user himself using exactly the same procedure as that for a group,
      and the result is the permission thus calculated.  

  Granting Permissions:
  *********************
  
 * add() is defined as :
 * 	start from top, if you find a no on the way, answer is no,
 *				if you find no nos and at least one yes, answer is yes
 *				if you find nothing, (all unsets) answer is no
 *
 * All groups have a certain priority assigned to them.
 * Possible permissions are  : Y, N, and unset (i.e. no value in the table)
 * To find the permission for a particular action on a particular page:
 * 		Find all groups that he belongs to.
 *  	Take all the groups priority wise and start from the lowest priority group and do this for each group:
 * 				In the page path, starting from the root node going towards the leaf node, do add and get the result
 * 		Group all results of same priority, and make it yes, if even a single yes is available (OR)
 * 		Now, we ll have an array of yeses and nos arranged by priority.
 *    +-----------+---+---+---+---+
 * 		| Priority: | 0 | 1 | 2 | 3 |
 *    +-----------+---+---+---+---+
 * 		| Perm    : | N | N | Y | N |
 *    ------------+---+---+---+---+
 * 		i.e Do an OR to get result (regardless of priority).
 *
 * -- Condition: To give a user the perm_grant permission, he has to belong to a group. --
 *
 * While giving permission: (grant)
 * 		For one module, for one page:
 * 		Find all groups that he belongs to.
 * 		If he gets perm_grant individually : find the highest priority group that he belongs to . save it in A
 * 		If he get perm_grant from group(s) :
 * 				Find those groups which give him perm_grant on that page
 * 				Find the highest priority among those. save it in B
 * 				Allow him to give or take permission only from those groups with priority <= max(A,B)
 * 				Allow him to give or take permission from all individual users.
 ***************************************
 To add a new template
 ***************************************
 
  Make new folder inside template folder
 Go to template folder and edit define template folder name
 copy default folder from template folder
 Change the TEMPLATE in config.inc.php in template folder
Prepend all css path by <?= $TEMPLATEBROWSERPATH ?>
the following are the list of labels which are to repalce in the CMS &$TITLE,&$MENUBAR,&$ACTIONBARMODULE,&$ACTIONBARPAGE,&$BREADCRUMB,&$MENUBAR,&$CONTENT,&$DEBUGINFO,&$ERRORSTRING,&$WARNINGSTRING,&$INFOSTRING,&$STARTSCRIPTS
Title of page is <?= $TITLE ?>
The following must be include in CMS:
  <?=$ERRORSTRING?>
  <?=$INFOSTRING?>
  <?=$WARNINGSTRING?>
  <?=$ERRORSTRING?>
  <?=$INFOSTRING?>
  <?=$WARNINGSTRING?>
  <?=$CONTENT?>
  <?=$ACTIONBARPAGE?>
 <?=$ACTIONBARMODULE?>
 <?=$MENUBAR?>
 <?=$STARTSCRIPTS?>
 To see the error include this :s
 <link rel="stylesheet" href="<?= $TEMPLATEBROWSERPATH ?>/../common/error.css" />
  
